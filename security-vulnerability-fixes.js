/**
 * Module de correctifs de sécurité pour Tech Shield
 * Ce module implémente des correctifs pour les vulnérabilités XSS, SQLi et CSRF
 * détectées par les outils de test de sécurité comme OWASP ZAP ou Burp Suite
 */

window.securityFixes = (function() {
    // Configuration des correctifs
    const config = {
        // Activer/désactiver les correctifs
        enabled: true,
        
        // Types de correctifs à appliquer
        fixes: {
            xss: true,   // Protection contre les attaques XSS
            sqli: true,  // Protection contre les injections SQL
            csrf: true   // Protection contre les attaques CSRF
        },
        
        // Journalisation détaillée
        verboseLogging: true
    };
    
    // Stockage des résultats d'application des correctifs
    let fixResults = {
        xss: [],
        sqli: [],
        csrf: [],
        summary: {
            total: 0,
            success: 0,
            failed: 0
        }
    };
    
    /**
     * Échappe les caractères HTML spéciaux pour prévenir les attaques XSS
     * @param {string} text - Texte à échapper
     * @returns {string} - Texte échappé
     */
    function escapeHtml(text) {
        if (!text) return '';
        return text
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
    
    /**
     * Applique les correctifs XSS aux champs de formulaire
     * @returns {Object} - Résultat de l'application des correctifs
     */
    function applyXSSFixes() {
        if (!config.enabled || !config.fixes.xss) {
            console.warn('Les correctifs XSS sont désactivés');
            return { success: false, message: 'Correctifs désactivés' };
        }
        
        console.log('Application des correctifs XSS...');
        const results = [];
        
        try {
            // Ajouter une fonction d'échappement HTML au prototype String si elle n'existe pas déjà
            if (!String.prototype.escapeHtml) {
                String.prototype.escapeHtml = function() {
                    return escapeHtml(this);
                };
                results.push({ target: 'String.prototype', success: true, message: 'Fonction escapeHtml ajoutée au prototype String' });
            }
            
            // Protéger les champs de saisie contre les attaques XSS
            const inputFields = document.querySelectorAll('input[type="text"], textarea');
            let protectedCount = 0;
            
            inputFields.forEach(field => {
                if (!field.hasAttribute('data-xss-protected')) {
                    // Sauvegarder les gestionnaires d'événements originaux
                    const originalOnChange = field.onchange;
                    const originalOnInput = field.oninput;
                    
                    // Ajouter un validateur pour l'événement change
                    field.onchange = function(e) {
                        // Échapper les caractères spéciaux
                        const originalValue = this.value;
                        const sanitizedValue = escapeHtml(originalValue);
                        
                        // Si la valeur contient des caractères potentiellement dangereux, les échapper
                        if (originalValue !== sanitizedValue) {
                            console.warn(`Caractères potentiellement dangereux détectés dans ${field.id || field.name || 'champ sans id'}`);
                            this.value = sanitizedValue;
                        }
                        
                        // Appeler le gestionnaire d'événements original s'il existe
                        if (typeof originalOnChange === 'function') {
                            originalOnChange.call(this, e);
                        }
                    };
                    
                    // Ajouter un validateur pour l'événement input
                    field.oninput = function(e) {
                        // Vérifier si la valeur contient des caractères potentiellement dangereux
                        const originalValue = this.value;
                        if (originalValue.includes('<') || originalValue.includes('>') || originalValue.includes('"') || originalValue.includes('\'')) {
                            console.warn(`Caractères potentiellement dangereux détectés dans ${field.id || field.name || 'champ sans id'}`);
                        }
                        
                        // Appeler le gestionnaire d'événements original s'il existe
                        if (typeof originalOnInput === 'function') {
                            originalOnInput.call(this, e);
                        }
                    };
                    
                    // Marquer le champ comme protégé
                    field.setAttribute('data-xss-protected', 'true');
                    protectedCount++;
                }
            });
            
            results.push({ target: 'Champs de formulaire', success: true, count: protectedCount, message: `${protectedCount} champs protégés contre les attaques XSS` });
            
            // Ajouter une fonction de validation pour les formulaires
            const forms = document.querySelectorAll('form');
            let protectedFormsCount = 0;
            
            forms.forEach(form => {
                if (!form.hasAttribute('data-xss-form-protected')) {
                    const originalSubmit = form.onsubmit;
                    
                    form.onsubmit = function(e) {
                        // Valider tous les champs de texte du formulaire
                        const textInputs = this.querySelectorAll('input[type="text"], textarea');
                        textInputs.forEach(input => {
                            input.value = escapeHtml(input.value);
                        });
                        
                        // Appeler le gestionnaire d'événements original s'il existe
                        if (typeof originalSubmit === 'function') {
                            return originalSubmit.call(this, e);
                        }
                    };
                    
                    // Marquer le formulaire comme protégé
                    form.setAttribute('data-xss-form-protected', 'true');
                    protectedFormsCount++;
                }
            });
            
            results.push({ target: 'Formulaires', success: true, count: protectedFormsCount, message: `${protectedFormsCount} formulaires protégés contre les attaques XSS` });
            
            return { success: true, results };
        } catch (error) {
            console.error('Erreur lors de l\'application des correctifs XSS:', error);
            return { success: false, error: error.message };
        }
    }
    
    /**
     * Applique les correctifs SQLi aux champs de formulaire
     * @returns {Object} - Résultat de l'application des correctifs
     */
    function applySQLiFixes() {
        if (!config.enabled || !config.fixes.sqli) {
            console.warn('Les correctifs SQLi sont désactivés');
            return { success: false, message: 'Correctifs désactivés' };
        }
        
        console.log('Application des correctifs SQLi...');
        const results = [];
        
        try {
            // Ajouter une fonction de validation SQL au prototype String si elle n'existe pas déjà
            if (!String.prototype.sanitizeSql) {
                String.prototype.sanitizeSql = function() {
                    // Échapper les caractères spéciaux SQL
                    return this
                        .replace(/'/g, "''")
                        .replace(/\\/g, "\\\\")
                        .replace(/;/g, "");
                };
                results.push({ target: 'String.prototype', success: true, message: 'Fonction sanitizeSql ajoutée au prototype String' });
            }
            
            // Protéger les champs de saisie contre les injections SQL
            const inputFields = document.querySelectorAll('input[type="text"], textarea');
            let protectedCount = 0;
            
            inputFields.forEach(field => {
                if (!field.hasAttribute('data-sqli-protected')) {
                    // Sauvegarder les gestionnaires d'événements originaux
                    const originalOnChange = field.onchange;
                    const originalOnInput = field.oninput;
                    
                    // Ajouter un validateur pour l'événement change
                    field.onchange = function(e) {
                        // Échapper les caractères spéciaux SQL
                        const originalValue = this.value;
                        const sanitizedValue = originalValue.sanitizeSql();
                        
                        // Si la valeur contient des caractères potentiellement dangereux, les échapper
                        if (originalValue !== sanitizedValue) {
                            console.warn(`Caractères SQL potentiellement dangereux détectés dans ${field.id || field.name || 'champ sans id'}`);
                            this.value = sanitizedValue;
                        }
                        
                        // Appeler le gestionnaire d'événements original s'il existe
                        if (typeof originalOnChange === 'function') {
                            originalOnChange.call(this, e);
                        }
                    };
                    
                    // Ajouter un validateur pour l'événement input
                    field.oninput = function(e) {
                        // Vérifier si la valeur contient des caractères potentiellement dangereux pour SQL
                        const originalValue = this.value;
                        if (originalValue.includes('\'') || originalValue.includes(';') || /\bOR\b/i.test(originalValue) || /\bUNION\b/i.test(originalValue) || /\bSELECT\b/i.test(originalValue)) {
                            console.warn(`Caractères SQL potentiellement dangereux détectés dans ${field.id || field.name || 'champ sans id'}`);
                        }
                        
                        // Appeler le gestionnaire d'événements original s'il existe
                        if (typeof originalOnInput === 'function') {
                            originalOnInput.call(this, e);
                        }
                    };
                    
                    // Marquer le champ comme protégé
                    field.setAttribute('data-sqli-protected', 'true');
                    protectedCount++;
                }
            });
            
            results.push({ target: 'Champs de formulaire', success: true, count: protectedCount, message: `${protectedCount} champs protégés contre les injections SQL` });
            
            // Ajouter une fonction de validation pour les formulaires
            const forms = document.querySelectorAll('form');
            let protectedFormsCount = 0;
            
            forms.forEach(form => {
                if (!form.hasAttribute('data-sqli-form-protected')) {
                    const originalSubmit = form.onsubmit;
                    
                    form.onsubmit = function(e) {
                        // Valider tous les champs de texte du formulaire
                        const textInputs = this.querySelectorAll('input[type="text"], textarea');
                        textInputs.forEach(input => {
                            input.value = input.value.sanitizeSql();
                        });
                        
                        // Appeler le gestionnaire d'événements original s'il existe
                        if (typeof originalSubmit === 'function') {
                            return originalSubmit.call(this, e);
                        }
                    };
                    
                    // Marquer le formulaire comme protégé
                    form.setAttribute('data-sqli-form-protected', 'true');
                    protectedFormsCount++;
                }
            });
            
            results.push({ target: 'Formulaires', success: true, count: protectedFormsCount, message: `${protectedFormsCount} formulaires protégés contre les injections SQL` });
            
            return { success: true, results };
        } catch (error) {
            console.error('Erreur lors de l\'application des correctifs SQLi:', error);
            return { success: false, error: error.message };
        }
    }
    
    /**
     * Applique les correctifs CSRF aux formulaires
     * @returns {Object} - Résultat de l'application des correctifs
     */
    function applyCSRFFixes() {
        if (!config.enabled || !config.fixes.csrf) {
            console.warn('Les correctifs CSRF sont désactivés');
            return { success: false, message: 'Correctifs désactivés' };
        }
        
        console.log('Application des correctifs CSRF...');
        const results = [];
        
        try {
            // Vérifier si le module CSRF est disponible
            if (!window.csrf) {
                console.error('Le module CSRF n\'est pas disponible');
                return { success: false, message: 'Module CSRF non disponible' };
            }
            
            // Protéger tous les formulaires avec des jetons CSRF
            window.csrf.protectForms();
            
            // Vérifier que tous les formulaires sont protégés
            const forms = document.querySelectorAll('form');
            let protectedCount = 0;
            let unprotectedCount = 0;
            
            forms.forEach(form => {
                const hasCSRFToken = !!form.querySelector('input[name="csrf_token"]');
                const hasCSRFAttribute = form.hasAttribute('data-csrf-protected');
                
                if (hasCSRFToken && hasCSRFAttribute) {
                    protectedCount++;
                } else {
                    // Tenter de protéger le formulaire manuellement
                    window.csrf.addCSRFTokenToForm(form);
                    
                    // Vérifier à nouveau
                    const nowHasCSRFToken = !!form.querySelector('input[name="csrf_token"]');
                    const nowHasCSRFAttribute = form.hasAttribute('data-csrf-protected');
                    
                    if (nowHasCSRFToken && nowHasCSRFAttribute) {
                        protectedCount++;
                    } else {
                        unprotectedCount++;
                        console.warn(`Impossible de protéger le formulaire ${form.id || 'sans id'} contre les attaques CSRF`);
                    }
                }
            });
            
            results.push({ target: 'Formulaires', success: true, protected: protectedCount, unprotected: unprotectedCount, message: `${protectedCount} formulaires protégés contre les attaques CSRF, ${unprotectedCount} non protégés` });
            
            // Régénérer l'ID de session pour plus de sécurité
            if (window.csrf.regenerateSessionId) {
                window.csrf.regenerateSessionId();
                results.push({ target: 'Session', success: true, message: 'ID de session régénéré' });
            }
            
            return { success: true, results };
        } catch (error) {
            console.error('Erreur lors de l\'application des correctifs CSRF:', error);
            return { success: false, error: error.message };
        }
    }
    
    /**
     * Applique tous les correctifs de sécurité
     * @returns {Object} - Résultats de l'application des correctifs
     */
    function applyAllFixes() {
        if (!config.enabled) {
            console.warn('Les correctifs de sécurité sont désactivés');
            return fixResults;
        }
        
        console.log('Application de tous les correctifs de sécurité...');
        
        // Réinitialiser les résultats
        fixResults = {
            xss: [],
            sqli: [],
            csrf: [],
            summary: {
                total: 0,
                success: 0,
                failed: 0
            }
        };
        
        // Appliquer les correctifs XSS
        if (config.fixes.xss) {
            const xssResult = applyXSSFixes();
            fixResults.xss = xssResult.results || [];
            fixResults.summary.total++;
            
            if (xssResult.success) {
                fixResults.summary.success++;
            } else {
                fixResults.summary.failed++;
            }
        }
        
        // Appliquer les correctifs SQLi
        if (config.fixes.sqli) {
            const sqliResult = applySQLiFixes();
            fixResults.sqli = sqliResult.results || [];
            fixResults.summary.total++;
            
            if (sqliResult.success) {
                fixResults.summary.success++;
            } else {
                fixResults.summary.failed++;
            }
        }
        
        // Appliquer les correctifs CSRF
        if (config.fixes.csrf) {
            const csrfResult = applyCSRFFixes();
            fixResults.csrf = csrfResult.results || [];
            fixResults.summary.total++;
            
            if (csrfResult.success) {
                fixResults.summary.success++;
            } else {
                fixResults.summary.failed++;
            }
        }
        
        console.log('Application des correctifs de sécurité terminée.');
        console.log(`Résumé: ${fixResults.summary.total} types de correctifs, ${fixResults.summary.success} réussis, ${fixResults.summary.failed} échoués.`);
        
        return fixResults;
    }
    
    /**
     * Génère un rapport HTML des correctifs appliqués
     * @returns {string} - Rapport HTML
     */
    function generateHTMLReport() {
        let html = `
        <div class="security-fixes-report">
            <h2>Rapport d'application des correctifs de sécurité</h2>
            <div class="report-summary">
                <p><strong>Total des types de correctifs:</strong> ${fixResults.summary.total}</p>
                <p><strong>Correctifs réussis:</strong> ${fixResults.summary.success}</p>
                <p><strong>Correctifs échoués:</strong> ${fixResults.summary.failed}</p>
            </div>
        `;
        
        // Section XSS
        if (fixResults.xss.length > 0) {
            html += `
            <div class="report-section">
                <h3>Correctifs XSS</h3>
                <ul class="fix-list">
            `;
            
            for (const result of fixResults.xss) {
                html += `
                    <li class="${result.success ? 'success' : 'failure'}">
                        <strong>${result.target}:</strong> ${result.message}
                    </li>
                `;
            }
            
            html += `
                </ul>
            </div>
            `;
        }
        
        // Section SQLi
        if (fixResults.sqli.length > 0) {
            html += `
            <div class="report-section">
                <h3>Correctifs SQLi</h3>
                <ul class="fix-list">
            `;
            
            for (const result of fixResults.sqli) {
                html += `
                    <li class="${result.success ? 'success' : 'failure'}">
                        <strong>${result.target}:</strong> ${result.message}
                    </li>
                `;
            }
            
            html += `
                </ul>
            </div>
            `;
        }
        
        // Section CSRF
        if (fixResults.csrf.length > 0) {
            html += `
            <div class="report-section">
                <h3>Correctifs CSRF</h3>
                <ul class="fix-list">
            `;
            
            for (const result of fixResults.csrf) {
                html += `
                    <li class="${result.success ? 'success' : 'failure'}">
                        <strong>${result.target}:</strong> ${result.message}
                    </li>
                `;
            }
            
            html += `
                </ul>
            </div>
            `;
        }
        
        html += `
            <div class="report-recommendations">
                <h3>Recommandations supplémentaires</h3>
                <ul>
                    <li>
                        <strong>Mises à jour régulières:</strong> Assurez-vous que toutes les bibliothèques et dépendances sont régulièrement mises à jour pour corriger les vulnérabilités connues.
                    </li>
                    <li>
                        <strong>Tests de pénétration:</strong> Effectuez des tests de pénétration réguliers avec des outils comme OWASP ZAP ou Burp Suite pour identifier de nouvelles vulnérabilités.
                    </li>
                    <li>
                        <strong>Formation à la sécurité:</strong> Formez les développeurs aux bonnes pratiques de sécurité pour éviter l'introduction de nouvelles vulnérabilités.
                    </li>
                </ul>
            </div>
        </div>
        `;
        
        return html;
    }
    
    // Initialiser le module
    function init() {
        console.log('Initialisation du module de correctifs de sécurité...');
        
        // Ajouter des styles CSS pour le rapport
        const style = document.createElement('style');
        style.textContent = `
            .security-fixes-report {
                font-family: Arial, sans-serif;
                max-width: 1200px;
                margin: 20px auto;
                padding: 20px;
                background-color: #f8f9fa;
                border-radius: 5px;
                box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            }
            .security-fixes-report h2 {
                color: #ca0d95;
                border-bottom: 1px solid #eee;
                padding-bottom: 10px;
                margin-bottom: 20px;
            }
            .security-fixes-report h3 {
                color: #333;
                margin-top: 20px;
                margin-bottom: 10px;
            }
            .report-summary {
                display: flex;
                flex-wrap: wrap;
                gap: 20px;
                margin-bottom: 20px;
                background-color: #fff;
                padding: 15px;
                border-radius: 5px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            }
            .report-summary p {
                margin: 0;
                flex: 1 0 200px;
            }
            .fix-list {
                list-style-type: none;
                padding: 0;
                margin: 0;
            }
            .fix-list li {
                padding: 10px;
                margin-bottom: 5px;
                border-radius: 4px;
            }
            .fix-list li.success {
                background-color: #e8f5e9;
                border-left: 4px solid #4caf50;
            }
            .fix-list li.failure {
                background-color: #ffebee;
                border-left: 4px solid #f44336;
            }
            .report-recommendations {
                background-color: #fff;
                padding: 15px;
                border-radius: 5px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                margin-top: 20px;
            }
            .report-recommendations ul {
                padding-left: 20px;
            }
            .report-recommendations li {
                margin-bottom: 10px;
            }
            .security-fix-btn {
                padding: 10px 15px;
                background-color: #ca0d95;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                font-weight: bold;
                margin-right: 10px;
                transition: background-color 0.3s;
            }
            .security-fix-btn:hover {
                background-color: #a80a7a;
            }
            .security-fix-controls {
                margin-bottom: 20px;
            }
        `;
        document.head.appendChild(style);
        
        // Ajouter l'interface utilisateur si nous sommes sur la page d'administration
        if (document.querySelector('.admin-container')) {
            // Vérifier si l'onglet de tests de sécurité existe déjà
            let securityTestTab = document.querySelector('.admin-nav a[data-tab="security-tests"]');
            
            // Si l'onglet n'existe pas, le créer
            if (!securityTestTab) {
                const adminNav = document.querySelector('.admin-nav ul');
                if (adminNav) {
                    const securityTestTabLi = document.createElement('li');
                    securityTestTabLi.innerHTML = '<a href="#" data-tab="security-tests">Tests de sécurité</a>';
                    adminNav.appendChild(securityTestTabLi);
                    securityTestTab = securityTestTabLi.querySelector('a');
                }
            }
            
            // Vérifier si le contenu de l'onglet existe déjà
            let securityTestContent = document.getElementById('security-tests');
            
            // Si le contenu n'existe pas, le créer
            if (!securityTestContent) {
                const adminContent = document.querySelector('.admin-content');
                if (adminContent) {
                    securityTestContent = document.createElement('div');
                    securityTestContent.id = 'security-tests';
                    securityTestContent.className = 'admin-tab';
                    securityTestContent.style.display = 'none';
                    adminContent.appendChild(securityTestContent);
                }
            }
            
            // Ajouter les contrôles de correctifs de sécurité
            if (securityTestContent) {
                // Vérifier si les contrôles existent déjà
                if (!document.getElementById('applySecurityFixes')) {
                    const securityFixControls = document.createElement('div');
                    securityFixControls.className = 'security-fix-controls';
                    securityFixControls.innerHTML = `
                        <h3>Correctifs de sécurité</h3>
                        <button id="applySecurityFixes" class="security-fix-btn">Appliquer les correctifs</button>
                        <button id="generateFixReport" class="security-fix-btn">Générer un rapport</button>
                    `;
                    securityTestContent.appendChild(securityFixControls);
                    
                    // Ajouter un conteneur pour les résultats
                    const securityFixResults = document.createElement('div');
                    securityFixResults.id = 'securityFixResults';
                    securityTestContent.appendChild(securityFixResults);
                    
                    // Ajouter les gestionnaires d'événements
                    document.getElementById('applySecurityFixes').addEventListener('click', function() {
                        const results = applyAllFixes();
                        document.getElementById('securityFixResults').innerHTML = generateHTMLReport();
                        alert('Les correctifs de sécurité ont été appliqués. Veuillez consulter le rapport pour plus de détails.');
                    });
                    
                    document.getElementById('generateFixReport').addEventListener('click', function() {
                        document.getElementById('securityFixResults').innerHTML = generateHTMLReport();
                    });
                }
            }
            
            // Ajouter un gestionnaire d'événements pour l'onglet si ce n'est pas déjà fait
            if (securityTestTab && !securityTestTab.hasAttribute('data-security-fix-initialized')) {
                securityTestTab.addEventListener('click', function() {
                    // Masquer tous les onglets
                    document.querySelectorAll('.admin-tab').forEach(tab => {
                        tab.style.display = 'none';
                    });
                    
                    // Afficher l'onglet de tests de sécurité
                    document.getElementById('security-tests').style.display = 'block';
                    
                    // Mettre à jour la classe active
                    document.querySelectorAll('.admin-nav a').forEach(link => {
                        link.classList.remove('active');
                    });
                    this.classList.add('active');
                });
                
                securityTestTab.setAttribute('data-security-fix-initialized', 'true');
            }
        }
        
        console.log('Module de correctifs de sécurité initialisé');
    }
    
    // Exporter les fonctions publiques
    return {
        applyXSSFixes,
        applySQLiFixes,
        applyCSRFFixes,
        applyAllFixes,
        generateHTMLReport,
        init,
        config
    };